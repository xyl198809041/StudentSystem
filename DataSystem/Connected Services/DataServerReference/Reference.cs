//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataSystem.DataServerReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="DataServer", ConfigurationName="DataServerReference.IDataServer")]
    public interface IDataServer {
        
        [System.ServiceModel.OperationContractAttribute(Action="DataServer/IDataServer/DoWork", ReplyAction="DataServer/IDataServer/DoWorkResponse")]
        void DoWork(string b);
        
        [System.ServiceModel.OperationContractAttribute(Action="DataServer/IDataServer/DoWork", ReplyAction="DataServer/IDataServer/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync(string b);
        
        [System.ServiceModel.OperationContractAttribute(Action="DataServer/IDataServer/Login", ReplyAction="DataServer/IDataServer/LoginResponse")]
        string Login(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="DataServer/IDataServer/Login", ReplyAction="DataServer/IDataServer/LoginResponse")]
        System.Threading.Tasks.Task<string> LoginAsync(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="DataServer/IDataServer/GetStudentMsgs", ReplyAction="DataServer/IDataServer/GetStudentMsgsResponse")]
        string GetStudentMsgs(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="DataServer/IDataServer/GetStudentMsgs", ReplyAction="DataServer/IDataServer/GetStudentMsgsResponse")]
        System.Threading.Tasks.Task<string> GetStudentMsgsAsync(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="DataServer/IDataServer/AddStudentMsg", ReplyAction="DataServer/IDataServer/AddStudentMsgResponse")]
        bool AddStudentMsg(string Name, string StudentId, string RuleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="DataServer/IDataServer/AddStudentMsg", ReplyAction="DataServer/IDataServer/AddStudentMsgResponse")]
        System.Threading.Tasks.Task<bool> AddStudentMsgAsync(string Name, string StudentId, string RuleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="DataServer/IDataServer/GetStudents", ReplyAction="DataServer/IDataServer/GetStudentsResponse")]
        string GetStudents(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="DataServer/IDataServer/GetStudents", ReplyAction="DataServer/IDataServer/GetStudentsResponse")]
        System.Threading.Tasks.Task<string> GetStudentsAsync(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="DataServer/IDataServer/GetRules", ReplyAction="DataServer/IDataServer/GetRulesResponse")]
        string GetRules(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="DataServer/IDataServer/GetRules", ReplyAction="DataServer/IDataServer/GetRulesResponse")]
        System.Threading.Tasks.Task<string> GetRulesAsync(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="DataServer/IDataServer/GetNewMsg", ReplyAction="DataServer/IDataServer/GetNewMsgResponse")]
        string GetNewMsg(string Guid, string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="DataServer/IDataServer/GetNewMsg", ReplyAction="DataServer/IDataServer/GetNewMsgResponse")]
        System.Threading.Tasks.Task<string> GetNewMsgAsync(string Guid, string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="DataServer/IDataServer/UserActionByJCRule", ReplyAction="DataServer/IDataServer/UserActionByJCRuleResponse")]
        void UserActionByJCRule(string StudentMsgId, string JCRuleId, string CommandName, string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="DataServer/IDataServer/UserActionByJCRule", ReplyAction="DataServer/IDataServer/UserActionByJCRuleResponse")]
        System.Threading.Tasks.Task UserActionByJCRuleAsync(string StudentMsgId, string JCRuleId, string CommandName, string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="DataServer/IDataServer/GetJCRules", ReplyAction="DataServer/IDataServer/GetJCRulesResponse")]
        string GetJCRules(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="DataServer/IDataServer/GetJCRules", ReplyAction="DataServer/IDataServer/GetJCRulesResponse")]
        System.Threading.Tasks.Task<string> GetJCRulesAsync(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="DataServer/IDataServer/UpdateRule", ReplyAction="DataServer/IDataServer/UpdateRuleResponse")]
        bool UpdateRule(string Name, string Rule);
        
        [System.ServiceModel.OperationContractAttribute(Action="DataServer/IDataServer/UpdateRule", ReplyAction="DataServer/IDataServer/UpdateRuleResponse")]
        System.Threading.Tasks.Task<bool> UpdateRuleAsync(string Name, string Rule);
        
        [System.ServiceModel.OperationContractAttribute(Action="DataServer/IDataServer/UpDateJCRule", ReplyAction="DataServer/IDataServer/UpDateJCRuleResponse")]
        bool UpDateJCRule(string Name, string JCRule);
        
        [System.ServiceModel.OperationContractAttribute(Action="DataServer/IDataServer/UpDateJCRule", ReplyAction="DataServer/IDataServer/UpDateJCRuleResponse")]
        System.Threading.Tasks.Task<bool> UpDateJCRuleAsync(string Name, string JCRule);
        
        [System.ServiceModel.OperationContractAttribute(Action="DataServer/IDataServer/GetStudentSumPoints", ReplyAction="DataServer/IDataServer/GetStudentSumPointsResponse")]
        string GetStudentSumPoints(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="DataServer/IDataServer/GetStudentSumPoints", ReplyAction="DataServer/IDataServer/GetStudentSumPointsResponse")]
        System.Threading.Tasks.Task<string> GetStudentSumPointsAsync(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="DataServer/IDataServer/UpdateSetting", ReplyAction="DataServer/IDataServer/UpdateSettingResponse")]
        bool UpdateSetting(string Name, string Setting);
        
        [System.ServiceModel.OperationContractAttribute(Action="DataServer/IDataServer/UpdateSetting", ReplyAction="DataServer/IDataServer/UpdateSettingResponse")]
        System.Threading.Tasks.Task<bool> UpdateSettingAsync(string Name, string Setting);
        
        [System.ServiceModel.OperationContractAttribute(Action="DataServer/IDataServer/GetSetting", ReplyAction="DataServer/IDataServer/GetSettingResponse")]
        string GetSetting(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="DataServer/IDataServer/GetSetting", ReplyAction="DataServer/IDataServer/GetSettingResponse")]
        System.Threading.Tasks.Task<string> GetSettingAsync(string Name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDataServerChannel : DataSystem.DataServerReference.IDataServer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataServerClient : System.ServiceModel.ClientBase<DataSystem.DataServerReference.IDataServer>, DataSystem.DataServerReference.IDataServer {
        
        public DataServerClient() {
        }
        
        public DataServerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DataServerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataServerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataServerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork(string b) {
            base.Channel.DoWork(b);
        }
        
        public System.Threading.Tasks.Task DoWorkAsync(string b) {
            return base.Channel.DoWorkAsync(b);
        }
        
        public string Login(string UserName, string Password) {
            return base.Channel.Login(UserName, Password);
        }
        
        public System.Threading.Tasks.Task<string> LoginAsync(string UserName, string Password) {
            return base.Channel.LoginAsync(UserName, Password);
        }
        
        public string GetStudentMsgs(string Name) {
            return base.Channel.GetStudentMsgs(Name);
        }
        
        public System.Threading.Tasks.Task<string> GetStudentMsgsAsync(string Name) {
            return base.Channel.GetStudentMsgsAsync(Name);
        }
        
        public bool AddStudentMsg(string Name, string StudentId, string RuleId) {
            return base.Channel.AddStudentMsg(Name, StudentId, RuleId);
        }
        
        public System.Threading.Tasks.Task<bool> AddStudentMsgAsync(string Name, string StudentId, string RuleId) {
            return base.Channel.AddStudentMsgAsync(Name, StudentId, RuleId);
        }
        
        public string GetStudents(string Name) {
            return base.Channel.GetStudents(Name);
        }
        
        public System.Threading.Tasks.Task<string> GetStudentsAsync(string Name) {
            return base.Channel.GetStudentsAsync(Name);
        }
        
        public string GetRules(string Name) {
            return base.Channel.GetRules(Name);
        }
        
        public System.Threading.Tasks.Task<string> GetRulesAsync(string Name) {
            return base.Channel.GetRulesAsync(Name);
        }
        
        public string GetNewMsg(string Guid, string Name) {
            return base.Channel.GetNewMsg(Guid, Name);
        }
        
        public System.Threading.Tasks.Task<string> GetNewMsgAsync(string Guid, string Name) {
            return base.Channel.GetNewMsgAsync(Guid, Name);
        }
        
        public void UserActionByJCRule(string StudentMsgId, string JCRuleId, string CommandName, string Name) {
            base.Channel.UserActionByJCRule(StudentMsgId, JCRuleId, CommandName, Name);
        }
        
        public System.Threading.Tasks.Task UserActionByJCRuleAsync(string StudentMsgId, string JCRuleId, string CommandName, string Name) {
            return base.Channel.UserActionByJCRuleAsync(StudentMsgId, JCRuleId, CommandName, Name);
        }
        
        public string GetJCRules(string Name) {
            return base.Channel.GetJCRules(Name);
        }
        
        public System.Threading.Tasks.Task<string> GetJCRulesAsync(string Name) {
            return base.Channel.GetJCRulesAsync(Name);
        }
        
        public bool UpdateRule(string Name, string Rule) {
            return base.Channel.UpdateRule(Name, Rule);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateRuleAsync(string Name, string Rule) {
            return base.Channel.UpdateRuleAsync(Name, Rule);
        }
        
        public bool UpDateJCRule(string Name, string JCRule) {
            return base.Channel.UpDateJCRule(Name, JCRule);
        }
        
        public System.Threading.Tasks.Task<bool> UpDateJCRuleAsync(string Name, string JCRule) {
            return base.Channel.UpDateJCRuleAsync(Name, JCRule);
        }
        
        public string GetStudentSumPoints(string Name) {
            return base.Channel.GetStudentSumPoints(Name);
        }
        
        public System.Threading.Tasks.Task<string> GetStudentSumPointsAsync(string Name) {
            return base.Channel.GetStudentSumPointsAsync(Name);
        }
        
        public bool UpdateSetting(string Name, string Setting) {
            return base.Channel.UpdateSetting(Name, Setting);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateSettingAsync(string Name, string Setting) {
            return base.Channel.UpdateSettingAsync(Name, Setting);
        }
        
        public string GetSetting(string Name) {
            return base.Channel.GetSetting(Name);
        }
        
        public System.Threading.Tasks.Task<string> GetSettingAsync(string Name) {
            return base.Channel.GetSettingAsync(Name);
        }
    }
}
